spring:
  datasource:
    url: ${pgsql_url:jdbc:postgresql://127.0.0.1:5432/basicinfo}
    username: ${pgsql_username:postgres}
    password: ${pgsql_password:postgres}
    driver-class-name: org.postgresql.Driver
    maxActive: 50
    initialSize: 10
    maxWait: 60000
    minIdle: 6
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
  cloud:
    consul:
      host: ${consul_host:127.0.0.1}
      port: ${consul_port:8500}
      enabled: true
      discovery:
        enabled: true
        instance-id: ${spring.application.name}:${server.port}
        prefer-ip-address: true
        health-check-interval: 10s
        hostname: ${spring.application.name}
        service-name: ${spring.application.name}
  zipkin:
    base-url: ${zipkin_url:http://localhost:9411/}
  sleuth:
    sampler:
      percentage: 1.0
    web:
      client:
        enabled: true
  redis:
    host: ${redis_host:127.0.0.1}
    port: ${redis_port:6379}
    database: ${redis_database:1}
    pool:
      max-active: 200
      max-wait: -1
      max-idle: 10
      min-idle: 0
    timeout: 10000000

  boot:
    admin:
      client:
        url: ${nccc_admin_monitor:http://localhost:9020}
        instance:
          prefer-ip: true
  servlet:
    multipart:
      # 文件上传限制500M
      max-file-size: 5242880000
      max-request-size: 5242880000

logstrategy:
  request: true
logging:
  config: classpath:log4j.yml

### Ribbon 配置
ribbon:
  # 连接超时
  ConnectTimeout: 50000
  # 响应超时
  ReadTimeout: 50000
### Feign 配置
feign:
  # 开启断路器（熔断器）
  hystrix:
    enabled: false
### Hystrix 配置
hystrix:
  # 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
  # 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
  # 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
  shareSecurityContext: true
  command:
    default:
      circuitBreaker:
        # 当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
        requestVolumeThreshold: 1
        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
        # 也就是5000毫秒后才会关闭circuit。默认5000
        sleepWindowInMilliseconds: 50000
        # 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false
        forceOpen: false
        # 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略，默认false
        forceClosed: false
      execution:
        isolation:
          thread:
            # 熔断器超时时间，默认：1000/毫秒
            timeoutInMilliseconds: 50000